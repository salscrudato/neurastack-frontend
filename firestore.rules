rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Personal prompts - users can only access their own prompts
      match /prompts/{promptId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Community prompts - readable by all authenticated users, writable by authenticated users
    match /communityPrompts/{promptId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                   request.auth.uid == resource.data.authorId;
      allow update: if request.auth != null &&
                   (request.auth.uid == resource.data.authorId ||
                    // Allow incrementing usage counters
                    request.writeFields.hasOnly(['usesCount', 'weeklyUses', 'lastUsed']));
      allow delete: if request.auth != null &&
                   request.auth.uid == resource.data.authorId;
    }

    // Fallback rule for other collections (temporary - expires June 21, 2025)
    // Remove this rule and add specific rules for other collections as needed
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 6, 21);
    }
  }
}